package javax.media.jai.operator;

import java.awt.RenderingHints;
import java.awt.image.RenderedImage;
import javax.media.jai.JAI;
import javax.media.jai.OperationDescriptorImpl;
import javax.media.jai.ParameterBlockJAI;
import javax.media.jai.PlanarImage;
import javax.media.jai.ROI;
import javax.media.jai.RenderedOp;



































































































































































































































































public class MosaicDescriptor
  extends OperationDescriptorImpl
{
  public static final MosaicType MOSAIC_TYPE_BLEND = new MosaicType("MOSAIC_TYPE_BLEND", 1);
  




  public static final MosaicType MOSAIC_TYPE_OVERLAY = new MosaicType("MOSAIC_TYPE_OVERLAY", 0);
  





  private static final String[][] resources = { { "GlobalName", "Mosaic" }, { "LocalName", "Mosaic" }, { "Vendor", "com.sun.media.jai" }, { "Description", JaiI18N.getString("MosaicDescriptor0") }, { "DocURL", "http://java.sun.com/products/java-media/jai/forDevelopers/jai-apidocs/javax/media/jai/operator/MosaicDescriptor.html" }, { "Version", JaiI18N.getString("DescriptorVersion") }, { "arg0Desc", JaiI18N.getString("MosaicDescriptor1") }, { "arg1Desc", JaiI18N.getString("MosaicDescriptor2") }, { "arg2Desc", JaiI18N.getString("MosaicDescriptor3") }, { "arg3Desc", JaiI18N.getString("MosaicDescriptor4") }, { "arg4Desc", JaiI18N.getString("MosaicDescriptor5") } };
  













  private static final Class[] paramClasses = { MosaicType.class, new PlanarImage[0].getClass(), new ROI[0].getClass(), new double[0].getClass(), new double[0].getClass() };
  







  private static final String[] paramNames = { "mosaicType", "sourceAlpha", "sourceROI", "sourceThreshold", "backgroundValues" };
  







  private static final Object[] paramDefaults = { MOSAIC_TYPE_OVERLAY, null, null, { { 1.0D } }, { 0.0D } };
  






  public MosaicDescriptor()
  {
    super(resources, new String[] { "rendered" }, 0, paramNames, paramClasses, paramDefaults, null);
  }
  








































  public static RenderedOp create(RenderedImage[] sources, MosaicType mosaicType, PlanarImage[] sourceAlpha, ROI[] sourceROI, double[][] sourceThreshold, double[] backgroundValues, RenderingHints hints)
  {
    ParameterBlockJAI pb = new ParameterBlockJAI("Mosaic", "rendered");
    


    int numSources = sources.length;
    for (int i = 0; i < numSources; i++) {
      pb.addSource(sources[i]);
    }
    
    pb.setParameter("mosaicType", mosaicType);
    pb.setParameter("sourceAlpha", sourceAlpha);
    pb.setParameter("sourceROI", sourceROI);
    pb.setParameter("sourceThreshold", sourceThreshold);
    pb.setParameter("backgroundValues", backgroundValues);
    
    return JAI.create("Mosaic", pb, hints);
  }
}
